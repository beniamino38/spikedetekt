{"name":"Spikedetekt","tagline":"","body":"SpikeDetekt\r\n-----------\r\n\r\nThis is a program for spike detection, that is optimized for high-channel count silicon probes.\r\n\r\nThis software was developed at the [Cortical Processing Laboratory](http://www.ucl.ac.uk/cortexlab) at UCL.\r\n\r\nPlease send feedback to Kenneth Harris (firstname at cortexlab.net), Shabnam Kadir (firstname at cortexlab.net)\r\n\r\nHere is a quick Start Guide (will become more comprehensive with time):\r\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n0) Installation:\r\n----------------\r\n\r\nSpikeDetekt is written in Python and should work on any OS. To install it, make sure you first have Python on your computer.\r\n\r\nWe recommend you use Python 2.6 or 2.7 (don't use python 3.X!). A free academic distribution can be obtained from [Enthought Python](http://enthought.com/products/epd.php).\r\n\r\nOnce you have set up Python on your system, download and unzip/tar either the .zip file or the tarball,\r\ngo to the `spikedetekt' folder and type (on the command line):\r\n\r\n    python setup.py install\r\n\r\nIn the above,  'python' is the necessary command on your system for calling python. The file 'setup.py' is to be found in the unzipped folder spikedetekt. \r\n\r\nThis will install SpikeDetekt. \r\n\r\n1) Usage:\r\n----------\r\n\r\nTo perform spike detection, you need:\r\n\r\n* a .dat file (which contains your raw unfiltered electrode data), \r\n* a .probe file, which contains information about the electrode,\r\n* a .params file, which contains all other parameters.\r\n\r\nThe above may have any combination of names. The name of your .params file will be the name of the folder where all the output will be stored. The simplest case is when you have the same name for all three files:\r\n\r\n    myexperiment.dat\r\n    myexperiment.probe\r\n    myexperiment.params\r\n    \r\nThis will result in output files contained in a folder with the local name: myexperiment.     \r\n\r\n2) Probefiles:\r\n---------------\r\nA probe file is a text file containing the information pertaining to the spatial arrangement of electrodes on the probe. This information is presented in the following form: \r\n\r\nThe general form of a .probe file for a multi-shank probe should take the following form:\r\n\r\n    probes = {\r\n        1: [\r\n            (0, 1), (0, 2),\r\n            (1, 2), (1, 3),\r\n            ...\r\n            ],\r\n        2: [\r\n           (13,15),(13,14),...\r\n            ],\r\n            \r\n        shank number: [neighbouring channel pairs\r\n            ],\r\n        ...\r\n        }\r\n\r\nThe file is a Python file which should define a dictionary variable probes,\r\nwith keys the shank number, and values a list of channel pairs defining the\r\nedges of the graph.\r\n\r\nI have included some examples of probe files:\r\n\r\n* buzsaki32.probe\r\n* linear16.probe\r\n* multishankslinear32.probe (an 8 shank example)\r\n\r\n\r\n3) Running\r\n----------------------------\r\n\r\nTo run the program type the following into the command line:\r\n\r\n    python spikedetekt/scripts/detektspikes.py myexperiment.params\r\n \r\nSee below on how to configure your parameter file, myexperiment.params according to the specifics of your experimental setup.\r\n\r\n\r\n\r\n4) Parameters to adjust\r\n----------------------------\r\nYour myexperiment.params file should contain the following minimal information pertaining to the location of your .probe and .dat files on your system and some very basic information, such as the total number of channels used:\r\n\r\n    \r\n    PROBE_FILE = 'probe_filename.probe'\r\n\r\n    RAW_DATA_FILES = ['file1.dat', 'file2.dat','file3.dat']\r\n    NCHANNELS = 32\r\n    SAMPLERATE = 20000 # in Hertz\r\n\r\nYou can specify an ordered list of .dat files to be concatenated, in the above example file1.dat, file2.dat and file3.dat are three recordings to be concatenated. \r\n\r\nThe default parameters are as follows (see spikedetekt/spikedetekt/defaultparameters.py):\r\n\r\n    DTYPE = \"i2\" # \">i2\" (> means big-endian), \"i4\", \"f2\"\r\n    # see http://docs.scipy.org/doc/numpy/reference/arrays.dtypes.html#arrays-dtypes-constructing\r\n\r\n    # Probe file (no default value provided)\r\n    #PROBE_FILE = 'probe_filename.probe'\r\n\r\n    # Raw data files (no default values provided)\r\n    #RAW_DATA_FILES = ['file1.dat', 'file2.dat']\r\n    #NCHANNELS = 32\r\n    #SAMPLERATE = 20000 # in Hertz\r\n\r\n    # Output directory, files are inserted in OUTPUT_DIR/OUTPUT_NAME\r\n    OUTPUT_DIR = None # the output directory, use params directory if None\r\n    OUTPUT_NAME = None # the filename for created directories, use params filename if None\r\n\r\n    # Thresholding\r\n    USE_SINGLE_THRESHOLD = False # use a single threshold for all channels\r\n    CHUNKS_FOR_THRESH = 5 # number of chunks used to determine threshold for detection\r\n    THRESH_SD = 4.5 # threshold for detection. standard deviations of signal\r\n    DETECT_POSITIVE = False # detect spikes with positive threshold crossing\r\n\r\n    # Recording data in HDF5 file\r\n    RECORD_RAW = True      # raw data\r\n    RECORD_HIGH = True     # high pass filtered data\r\n    RECORD_LOW = True      # low pass filtered data\r\n\r\n    # Options for filtering\r\n    F_LOW = 500. # low pass frequency (Hz)\r\n    F_HIGH_FACTOR = 0.95 # high pass frequency as a proportion of the Nyquist freq, used to derive F_HIGH, i.e. F_HIGH = 0.95*SAMPLERATE/2 here\r\n    BUTTER_ORDER = 3 # Order of butterworth filter\r\n    WRITE_FIL_FILE = True # write filtered output to .fil file\r\n\r\n    # Options for spike detection\r\n    T_BEFORE = .0005 # time before peak in extracted spike\r\n    T_AFTER = .0005 # time after peak in extracted spike\r\n    T_JOIN_CC = .0005 # maximum time between two samples for them to be \"contiguous\" in detection step\r\n    PENUMBRA_SIZE = 0 # mask penumbra size (0 no penumbra, 1 first neighbours, etc.)\r\n\r\n    # Options for alignment\r\n    USE_WEIGHTED_MEAN_PEAK_SAMPLE = True # used for aligning waves\r\n    UPSAMPLING_FACTOR = 10 # used for aligning waves\r\n\r\n    # Options for features\r\n    FPC = 3 # Features per channel\r\n    PCA_MAXWAVES = 10000 # number of waves to use to extract principal components\r\n    SHOW_PCS = False # show principal components\r\n\r\n    # Options for masking\r\n    USE_FLOAT_MASKS = True\r\n    USE_INTERPOLATION = True\r\n    ADDITIONAL_FLOAT_PENUMBRA = 2 # adds some more penumbra\r\n    FLOAT_MASK_THRESH_SD = (0, 4.5) # (min, max), mask 0 at min, 1 at max\r\n    FLOAT_MASK_INTERPOLATION = 'x' # f(x) for x in [0,1], f(0)=0, f(1)=1\r\n\r\n    # Options for computing in chunks\r\n    CHUNK_SIZE = 20000   # number of time samples used in chunk for filtering and detection\r\n    CHUNK_OVERLAP_SECONDS = 0.01 # overlap time (in seconds) of chunks, should be wider than spike width\r\n\r\n    # Maximum number of spikes to process\r\n    MAX_SPIKES = None # None for all spikes, or an int\r\n\r\n    # Experimental options\r\n    DO_GLOBAL_CLUSTERING = False\r\n    SORT_CLUS_BY_CHANNEL = False # Sort clusters by the channel where the peak occurs\r\n    \r\n    \r\nIf you need parameters which differ from the default, include these in your myexperiment.params file. \r\n\r\n\r\n5) Output\r\n---------------\r\n\r\nSpikeDetekt will output the following files for each shank, where n is your shank number:\r\n\r\n+ .fet.n (feature file - required for all versions of KlustaKwik)\r\n\r\n+ .fmask.n (float masks for using with the new masked KlustaKwik)\r\n\r\n+ .mask.n (soon to be obsolete: binary masks for using with the new masked KlustaKwik)\r\n\r\n+ .spk.n (spike file)\r\n\r\n+ .upsk.n (unfiltered spike waveform)\r\n\r\n+ .res.n (list of spike times)\r\n\r\n+ .clu.n (a trivial clu file for use with Neuroscope, for observing spikes after detection, before clustering. Will be made redundant later)\r\n\r\nIn addition, the following file will also be output:\r\n\r\n+ .xml (an xml file with the parameters that are needed by the data visualization programs: Neuroscope and Klusters). We now recommend using KlustaViewa for manual clustering.\r\n\r\n+ .fil (highpass filtered data)\r\n\r\n+ .h5 files (an [.h5](http://en.wikipedia.org/wiki/Hierarchical_Data_Format) file duplicating a lot of the above data, which will later replace the above).\r\n  .high.h5,\r\n  .low.h5,\r\n  .waves.h5,\r\n  .main.h5,\r\n  .raw.h5. (See spikdetekt/docs/fileformat.md for more details).\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}